name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Remove lock file if exists
      run: node -e "const fs = require('fs'); if (fs.existsSync('package-lock.json')) fs.unlinkSync('package-lock.json')"
      continue-on-error: true

    - name: Install dependencies
      run: npm install

    - name: Lint code (optional)
      run: npm run lint || echo "Linting skipped"
      continue-on-error: true

    - name: Build Electron app
      run: npm run build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-builds
        path: |
          dist/*.AppImage
          dist/*.tar.gz

    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-builds
        path: |
          dist/*.exe
          dist/*.zip

    - name: Upload artifacts (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-builds
        path: |
          dist/*.dmg
          dist/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          linux-builds/*
          windows-builds/*
          macos-builds/*
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## 🚀 PortMan ${{ github.ref_name }}

          ### 📦 下载 | Downloads

          - **Windows**: `PortMan-Setup-*.exe` (安装包) 或 `PortMan-*-win.zip` (便携版)
          - **macOS**: `PortMan-*.dmg` (安装包) 或 `PortMan-*-mac.zip` (便携版)
          - **Linux**: `PortMan-*.AppImage` (便携版) 或 `PortMan-*-linux.tar.gz` (压缩包)

          ### 📖 文档 | Documentation

          - [安装指南 | Installation Guide](https://github.com/SinoMiles/PortMan/blob/main/docs/INSTALLATION.md)
          - [常见问题 | FAQ](https://github.com/SinoMiles/PortMan/blob/main/docs/FAQ.md)
          - [更新日志 | Changelog](https://github.com/SinoMiles/PortMan/blob/main/CHANGELOG.md)

          ### 🔧 系统要求 | System Requirements

          - **Windows**: Windows 10 1903+ / Windows 11
          - **macOS**: macOS 10.14 (Mojave)+
          - **Linux**: Ubuntu 18.04+, CentOS 8+, Fedora 30+
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Remove lock file if exists
      run: node -e "const fs = require('fs'); if (fs.existsSync('package-lock.json')) fs.unlinkSync('package-lock.json')"
      continue-on-error: true

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm test

    - name: Check application structure
      run: |
        echo "Checking application structure..."
        ls -la src/
        echo "Main files exist:"
        test -f src/main.js && echo "✓ main.js"
        test -f src/preload.js && echo "✓ preload.js"
        test -f src/renderer.js && echo "✓ renderer.js"
        test -f src/index.html && echo "✓ index.html"
        test -f src/styles.css && echo "✓ styles.css"
        echo "Application structure check completed"
